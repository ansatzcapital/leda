name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 5 * * *'

permission s:
  contents: read

jobs:
  # Run tests, linters, and checkers via nox
  test:
    runs-on: ${{ matrix.os }}

    env:
      LEDA_TEST_OUTPUT_DIR: ~/leda_outputs/
      PIP_DISABLE_PIP_VERSION_CHECK: '1'

    strategy:
      fail-fast: false
      matrix:
        # See https://help.github.com/articles/virtual-environments-for-github-actions
        os:
          - ubuntu-latest
          # TODO: Switch back to `macos-latest` when we fix small issues with macOS 14 ARM
          - macos-13
          - windows-latest
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.8']

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade setuptools pip wheel
          python -m pip install nox

      - name: Test with nox
        run: nox
        if: ${{ ! (matrix.os == 'windows-latest' && matrix.python-version == 'pypy-3.8') }}

      # TODO: Run tests on windows/pypy-3.8

      - name: Integration test with nox
        run: nox -t integration_test --python ${{ matrix.python-version }}
        # Skip integration tests on Windows/py3.8 because
        # there are no pre-built Windows/py3.8/numpy1.6.6 wheels.
        # Skip py3.9 because none of the bundles are for it.
        # TODO: Investigate issues on Windows and pypy.
        if: ${{ (matrix.python-version != '3.9') && ! (matrix.os == 'windows-latest' && matrix.python-version == '3.8') && ! startsWith(matrix.python-version, 'pypy-') }}

      - name: Upload failed outputs
        uses: actions/upload-artifact@v4
        with:
          name: leda-outputs-${{ matrix.os }}-${{ matrix.python-version }}
          path: ~/leda_outputs/
          retention-days: 1
        if: ${{ failure() }}

  # Test building and publishing
  # See:
  #  - https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
  #  - https://packaging.python.org/en/latest/tutorials/packaging-projects/
  #  - https://www.seanh.cc/2022/05/21/publishing-python-packages-from-github-actions/
  publish-test:
    runs-on: ubuntu-latest

    needs: [test]

    strategy:
      matrix:
        python-version: ['3.8']

    steps:
    - uses: actions/checkout@v4
      with:
        # See https://github.com/actions/checkout/issues/261
        ref: ${{ github.event.pull_request.head.sha }}
        # Grab entire history for setuptools_scm
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade build twine

    - name: Create packages
      run: python -m build

    - name: Run twine check
      run: twine check dist/*
